{"version":3,"sources":["views/components/IconButton.js","views/components/SelectedList.js","views/components/AudioPlayer.js","views/pages/App.js","reportWebVitals.js","index.js"],"names":["IconButtonAtoms","handleClick","icon","IconButton","color","onClick","SelectedList","list","handleItemClick","handleDeleteClick","index","List","component","aria-label","map","item","ListItem","button","selected","id","ListItemText","primary","name","console","log","ListItemSecondaryAction","AudioPlayer","audio","src","controls","App","useState","recording","setRecording","fileName","setFileName","setAudio","recordRef","useRef","audioList","setAudioList","selectedIndex","setSelectedIndex","handleAudioListItemClick","successRecording","stream","current","MediaRecorder","mimeType","tempChunks","addEventListener","ele","data","size","push","state","audioListItem","length","flatMap","reduce","a","b","Math","max","URL","createObjectURL","Blob","start","failRecording","error","className","value","onChange","event","target","navigator","mediaDevices","getUserMedia","video","then","stop","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc74be50.chunk.js","sourcesContent":["import { IconButton } from '@material-ui/core'\r\n\r\nconst IconButtonAtoms = ({ handleClick, icon }) =>\r\n    <IconButton\r\n        color='secondary'\r\n        onClick={handleClick} >\r\n        {icon} \r\n    </IconButton>\r\n\r\nexport default IconButtonAtoms;\r\n","import { List, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from './IconButton'\r\n\r\nconst SelectedList = ({ list, handleItemClick, handleDeleteClick, index}) => (\r\n     <List component=\"nav\" aria-label=\"secondary\">\r\n          {\r\n            list.map(item =>\r\n              <ListItem\r\n                button\r\n                selected={index === item.id} key={item.id}>\r\n                <ListItemText\r\n                    primary={item.name}\r\n                    onClick={() => {\r\n                      console.log(item)\r\n                      handleItemClick(item)\r\n                    }\r\n                } />\r\n                <ListItemSecondaryAction\r\n                  onClick={() => {\r\n                    handleDeleteClick(list, item)\r\n                  }\r\n                }>\r\n                  <IconButton icon={<DeleteIcon />}  />\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            )\r\n          }\r\n        </List>  \r\n)\r\n\r\nexport default SelectedList;","import ReactAudioPlayer from 'react-audio-player'\r\n\r\nconst AudioPlayer = ({audio}) => <ReactAudioPlayer src={audio === null ? '' : audio} controls />\r\n\r\nexport default AudioPlayer;","import { useState, useRef } from 'react'\n\nimport StopIcon from '@material-ui/icons/Stop';\nimport KeyboardVoiceIcon from '@material-ui/icons/KeyboardVoice';\nimport './App.css';\nimport SelectedList from '../components/SelectedList'\nimport AudioPlayer from '../components/AudioPlayer'\nimport IconButton from '../components/IconButton'\n\nconst App = () => {\n  const [recording, setRecording] = useState('inactive')\n  const [fileName, setFileName] = useState('sample')\n  const [audio, setAudio] = useState(null)\n  // useRefは中身が変更になってもそのことを通知しない\n  // https://ja.reactjs.org/docs/hooks-reference.html#useref\n  const recordRef = useRef(null)\n\n  const [audioList, setAudioList] = useState([])\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const handleAudioListItemClick = ({id, audio}) => {\n    setSelectedIndex(id)\n    setAudio(audio)\n  };\n\n  const startRecording = () => {\n    // メディア入力デバイスへのアクセスを起動する、Promiseを作成\n    // https://developer.mozilla.org/ja/docs/Web/API/MediaDevices\n    navigator.mediaDevices.getUserMedia(\n      { audio: true, video: false }\n    ).then(successRecording, failRecording)\n  }\n\n  const successRecording = stream => {\n  // 入力されたMediaStreamを記録する\n  // https://developer.mozilla.org/ja/docs/Web/API/MediaRecorder\n    recordRef.current = new MediaRecorder(stream, {\n      mimeType: 'video/webm;codecs=vp9'\n    })\n\n    let tempChunks = [];\n    recordRef.current.addEventListener('dataavailable', ele => {\n      if (ele.data.size > 0) {\n        tempChunks.push(ele.data);\n      }\n    })\n\n    recordRef.current.addEventListener('start', () => setRecording(recordRef.current.state))    \n\n    recordRef.current.addEventListener('stop', () => {\n      const audioListItem = {\n        id: audioList.length === 0 ? 1 : audioList.flatMap(item => item.id).reduce((a, b) => Math.max(a, b)) + 1,\n        name: fileName,\n        audio: URL.createObjectURL(new Blob(tempChunks))\n      }\n      handleAudioListItemClick(audioListItem)\n      setAudioList([...audioList, audioListItem])\n      setRecording(recordRef.current.state)\n    })\n\n    // onclick時に起動させる\n    recordRef.current.start()\n  }\n\n  const failRecording = (error) => {              \n    console.error('mediaDevice.getUserMedia() error:', error);\n    return; \n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <AudioPlayer audio={audio === null ? '' : audio} controls />\n      </div>\n      <div>\n        <input\n          value={fileName}\n          onChange={event => setFileName(event.target.value)} />\n        <IconButton\n          color='secondary'\n          handleClick={() => recording === 'inactive' ? startRecording() : recordRef.current.stop()}\n          icon={recording === 'inactive' ? <KeyboardVoiceIcon /> : <StopIcon />} \n        />\n      </div>\n      <div>\n        <SelectedList\n          list={audioList}\n          handleItemClick={handleAudioListItemClick}\n          handleDeleteClick={(list, { id }) => setAudioList(list.filter(item => item.id !== id))}\n          index={selectedIndex} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/pages/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}